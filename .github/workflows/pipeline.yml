# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Grocereasy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  PYTHON_VERSION: 3.10.6
  POETRY_VERSION: 1.1.5
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCE_INSTANCE_ZONE: ${{ secrets.GCE_INSTANCE_ZONE }} 
  GITHUB_SHA: ${{ github.sha }}


jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - uses: actions/checkout@v3

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        credentials_json: '${{ secrets.TESTER }}'

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    #----------------------------------------------
    #        install & configure poetry   
    #----------------------------------------------
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.2.2
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Install dependencies
      run: |
        poetry install   

    #----------------------------------------------
    #              run linters
    #----------------------------------------------
    - name: Linters
      run: |
        source .venv/bin/activate
        flake8 .
        mypy .
        isort .
        black . --check
    

    #----------------------------------------------
    #              run test suite
    #----------------------------------------------
    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest tests/
    
  build:
    needs: test

    strategy:
      matrix:
        component: [worker, storer, orchestrator]
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - uses: actions/checkout@v3
    #----------------------------------------------
    #             auth to gcloud
    #----------------------------------------------
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0
      with:
        token_format: 'access_token'
        credentials_json: '${{ secrets.GCE_SA_KEY }}'
  
    #----------------------------------------------
    #              set up gcloud
    #----------------------------------------------
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    #----------------------------------------------
    #        push and deploy docker image  
    #----------------------------------------------
    - name: Authorize Docker push
      run: gcloud auth configure-docker -q
    - name: Build and Push Container
      run: |-
        docker build  \
         -t gcr.io/$GCP_PROJECT_ID/${{ matrix.component }}:${{ github.sha }} \
         --build-arg COMPONENT=${{ matrix.component }} \
         --build-arg GCP_PROJECT_ID=$GCP_PROJECT_ID \
         --build-arg ENVIRONMENT=production .
        docker push gcr.io/$GCP_PROJECT_ID/${{ matrix.component }}:${{ github.sha }}
     
    #----------------------------------------------
    #             update startup script
    #----------------------------------------------
    - name: Update startup script to prune and update IP address
      run: |-
        gcloud compute instances add-metadata ${{ matrix.component }} \
          --zone "$GCE_INSTANCE_ZONE" \
          --metadata=startup-script="#! /bin/bash
            docker image prune -af"
    - name: Deploy
      run: |-
        gcloud compute instances update-container "${{ matrix.component }}" \
          --zone "$GCE_INSTANCE_ZONE" \
          --container-image "gcr.io/$GCP_PROJECT_ID/${{ matrix.component }}:${{ github.sha }}"
    
    #----------------------------------------------
    #            purge old gcr images
    #----------------------------------------------
    - name: Purge GCR images
      run: |-
        gcloud container images list-tags gcr.io/$GCP_PROJECT_ID/${{ matrix.component }} \
          --format="get(digest)" --filter="NOT tags=$GITHUB_SHA" | \
          awk -v image_path="gcr.io/$GCP_PROJECT_ID/${{ matrix.component }}@" '{print image_path $1}' | \
          xargs -r gcloud container images delete --force-delete-tags --quiet